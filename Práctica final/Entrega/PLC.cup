import java_cup.runtime.*;


// Acciones JAVA
action code {:
    
    // Variables globales
    private int var = 0;
    private int etq = 0;
    
    
    /**
     * Genera una variable con la estructura '$vX', siendo X un número.
     */
    private String crearVariable() {
        return "$v" + (var++);
    }
    
    /**
     * Genera una etiqueta con la estructura 'EX', siendo X un número.
     */
    private String crearEtiqueta() {
        return "E" + (etq++);
    }
    
    /**
     * Genera el código intermedio y lo escribe en el fichero de salida (.ctd).
     * 
     * @param   id      Identificador del código a escribir
     * @param   a       Primer argumento del código
     * @param   b       Último argumento del código
     * @param   var     Variable o etiqueta (según el id) para la referencia
     */
    private void escribirFichero(String id, String a, String b, String var) {
        switch (id) {
        
            // Referencias
            case "v":
                PLC.out.println("\t" + var + " = " + a + ";");
                break;
            
            case "etq":
                PLC.out.println(var + ":");
                break;
                
            // Operadores
            case "+":
                PLC.out.println("\t" + var + " = " + a + " + " + b + ";");
                break;
                
            case "-":
                PLC.out.println("\t" + var + " = " + a + " - " + b + ";");
                break;
                
            case "*":
                PLC.out.println("\t" + var + " = " + a + " * " + b + ";");
                break;
                
            case "/":
                PLC.out.println("\t" + var + " = " + a + " / " + b + ";");
                break;
            
            case "n":
                PLC.out.println("\t" + var + " = -" + a + ";");
                break;
            
            // Funciones
            case "print":
                PLC.out.println("\tprint " + var + ";");
                break;
            
            case "if<":
                PLC.out.println("\tif (" + a + " < " + b + ") goto " + var + ";");
                break;
            
            case "if=":
                PLC.out.println("\tif (" + a + " == " + b + ") goto " + var + ";");
                break;
            
            case "goto":
                PLC.out.println("\tgoto " + var + ";");
                break;
                
                
            default:
                System.err.println("Error al leer '" + id + "'.");
        }
    }
    
    
    /* Esta clase interna se encarga de almacenar 3 etiquetas diferentes
     * de forma que puedan moverse por la gramática a través de RESULT.
     * 
     * Las etiquetas representan lo siguiente:
     * 1. Salto si se cumple la condición (true).
     * 2. Salto si no se cumple la condición (false).
     * 3. Salto tras ejecutar la sentencia (salida).
     */
    class Condicion {
        
        // Variables
        private String[] etiquetas = {null, null, null};
        private boolean valor;
        
        
        // Constructores
        public Condicion() {
            etiquetas[0] = crearEtiqueta();
            etiquetas[1] = crearEtiqueta();
        }
        
        public Condicion(String etiqueta1, String etiqueta2) {
            etiquetas[0] = etiqueta1;
            etiquetas[1] = etiqueta2;
        }
        
        
        // Getters
        public String getEtiqueta1() {
            return etiquetas[0];
        }
        
        public String getEtiqueta2() {
            return etiquetas[1];
        }
        
        public String getEtiqueta3() {
            return etiquetas[2];
        }
        
        public boolean getValor() {
            return valor;
        }
        
        // Setters
        public void setEtiqueta1(String etiqueta) {
            etiquetas[0] = etiqueta;
        }
        
        public void setEtiqueta2(String etiqueta) {
            etiquetas[1] = etiqueta;
        }
        
        public void setEtiqueta3(String etiqueta) {
            etiquetas[2] = etiqueta;
        }
        
        public void valor(boolean valor) {
            this.valor = valor;
        }
    }
:}


// Terminales
terminal    IF, ELSE, DO, WHILE, FOR, PRINT;        // Funciones del lenguaje
terminal    EQ, NE, LT, LE, GT, GE, NO, AND, OR;    // Operadores lógicos
terminal    SUM, RES, MUL, DIV, NEG, IGUAL;         // Operadores matemáticos
terminal    AP, CP, AC, CC, AL, CL;                 // Aperturas y cierres
terminal    PYC;                                    // Fin de línea

terminal    String  VAR, NUM;    // Valores numéricos


// No-terminales
non terminal    sents, sent;            // Sentencias genéricas
non terminal    sent_if, sent_else;     // Sentencia de función 'if' ó 'if-else'

non terminal    Condicion   cond;   // Condición
non terminal    String      exp;    // Expresión matemática


// Precedencias
precedence  left        IF, ELSE, DO, WHILE, FOR, PRINT;  
precedence  left        SUM, RES;
precedence  left        MUL, DIV;
precedence  left        EQ, LE, GE;
precedence  left        NE, LT, GT;
precedence  left        NO, AND, OR;
precedence  left        VAR, NUM;

precedence  nonassoc    NEG;
precedence  nonassoc    AP, CP;
precedence  nonassoc    AC, CC;
precedence  nonassoc    AL, CL;


// Gramática
sents ::= sents sent
        | sent;

sent ::= sent_if
       | WHILE AP cond CP sents
       | DO sents WHILE AP cond CP PYC
       | FOR AP exp PYC cond PYC exp CP sents
       | PRINT AP exp:e CP PYC                  {: RESULT = e;  escribirFichero("print", null, null, e);   :}
       | AL sents:s CL                          {: RESULT = s; :}
       | exp:e PYC;

// Funciones
sent_if     ::= IF AP cond:c CP     {:  c.setEtiqueta3(crearEtiqueta());                        escribirFichero("etq", null, null, c.getEtiqueta1()); :}
                sents               {:  escribirFichero("goto", null, null, c.getEtiqueta3());  escribirFichero("etq", null, null, c.getEtiqueta2()); :}
                sent_else           {:  escribirFichero("etq", null, null, c.getEtiqueta3());                                                         :};

sent_else   ::= ELSE sent:s         {:  RESULT = s; :}
              | /* Vacío */ ;

// Expresiones
exp ::= exp:a SUM exp:b     {: RESULT = crearVariable();    escribirFichero("+", a, b, RESULT);     :}
      | exp:a RES exp:b     {: RESULT = crearVariable();    escribirFichero("-", a, b, RESULT);     :}
      | exp:a MUL exp:b     {: RESULT = crearVariable();    escribirFichero("*", a, b, RESULT);     :}
      | exp:a DIV exp:b     {: RESULT = crearVariable();    escribirFichero("/", a, b, RESULT);     :}
      | AP exp:e CP         {: RESULT = e;                                                          :}
      | RES exp:e           {: RESULT = crearVariable();    escribirFichero("n", e, null, RESULT);  :}
        %prec NEG
      | VAR:v IGUAL exp:e   {: RESULT = v;                  escribirFichero("v", e, null, RESULT);  :}
      | VAR:v               {: RESULT = v;                                                          :}
      | NUM:n               {: RESULT = n;                                                          :};

// Condiciones
cond ::= exp:a EQ exp:b     {:  RESULT = new Condicion();   escribirFichero("if=", a, b, RESULT.getEtiqueta1());    escribirFichero("goto", null, null, RESULT.getEtiqueta2());                                                                 :}
       | exp:a NE exp:b     {:  RESULT = new Condicion();   escribirFichero("if=", a, b, RESULT.getEtiqueta2());    escribirFichero("goto", null, null, RESULT.getEtiqueta1());                                                                 :}
       | exp:a LT exp:b     {:  RESULT = new Condicion();   escribirFichero("if<", a, b, RESULT.getEtiqueta1());    escribirFichero("goto", null, null, RESULT.getEtiqueta2());                                                                 :}
       | exp:a LE exp:b     {:  RESULT = new Condicion();   escribirFichero("if<", a, b, RESULT.getEtiqueta1());    escribirFichero("if=", a, b, RESULT.getEtiqueta1());            escribirFichero("goto", null, null, RESULT.getEtiqueta2()); :}
       | exp:a GT exp:b     {:  RESULT = new Condicion();   escribirFichero("if<", a, b, RESULT.getEtiqueta2());    escribirFichero("if=", a, b, RESULT.getEtiqueta2());            escribirFichero("goto", null, null, RESULT.getEtiqueta1()); :}
       | exp:a GE exp:b     {:  RESULT = new Condicion();   escribirFichero("if<", a, b, RESULT.getEtiqueta2());    escribirFichero("goto", null, null, RESULT.getEtiqueta1());                                                                 :}
       | cond:a AND         {:                              escribirFichero("etq", null, null, a.getEtiqueta1());                                                                                                                               :}
         cond:b             {:                              escribirFichero("etq", null, null, a.getEtiqueta2());   escribirFichero("goto", null, null, b.getEtiqueta2());          RESULT = b;                                                 :}
       | cond:a OR          {:                              escribirFichero("etq", null, null, a.getEtiqueta2());                                                                                                                               :}
         cond:b             {:                              escribirFichero("etq", null, null, a.getEtiqueta1());   escribirFichero("goto", null, null, b.getEtiqueta1());          RESULT = b;                                                 :}
       | NO cond:c          {:  RESULT = new Condicion(c.getEtiqueta2(), c.getEtiqueta1());   :}
       | AP cond CP;


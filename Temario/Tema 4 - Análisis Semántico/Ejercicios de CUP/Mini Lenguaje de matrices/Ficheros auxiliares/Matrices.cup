import java_cup.runtime.*;
import java.util.ArrayList;


action code {:
    double[][] matriz;
    
    ArrayList<ArrayList<Double>> filas = new ArrayList<ArrayList<Double>>();
    ArrayList<Double> fila = new ArrayList<Double>();
    
    public void error(int id) {
        switch (id) {
            case 1 :
                System.out.println(Matrices.ERROR_FILAS);
                break;
            
            case 2 :
                System.out.println(Matrices.ERROR_INVERSA);
                break;

            case 3 :
                System.out.println(Matrices.ERROR_ADJUNTA);
                break;
                
            case 4 :
                System.out.println(Matrices.ERROR_PROD);
                break;
                
            case 5 :
                System.out.println(Matrices.ERROR_SUMA);
                break;
            
            case 6 :
                System.out.println(TablaSimbolos.ERROR_NOEXISTE);
                break;
            
            default:
                System.out.println("Error desconocido");
                break;
        }
    }
    
    public double[][] crearMatriz(ArrayList<ArrayList<Double>> filas) {
        double[][] matriz = null;
        
        try {
            matriz = Matrices.toArray(filas);
            
        } catch (Exception e) {
            error(1);
        }
        
        return matriz;
    }
:}


// Terminales
terminal    String  IDENT;                                  // Variables
terminal    Double  NUMERO;                                 // Números
terminal            ALL, CLL, AP, CP, AC, CC;               // Aperturas y cierres
terminal            COMA, PYC, ASIG;                        // Símbolos de separación
terminal            MAS, MENOS, POR, DIV;                   // Operaciones
terminal            PRINT, INVERSA, TRANSPUESTA, ADJUNTA;   // Funciones matriciales


// No-Terminales
non terminal    double[][]  matriz;
non terminal    double[][]  funcion;
non terminal    double[][]  argumento;
non terminal    double[][]  operacion;
non terminal                linea;
non terminal                definicion;
non terminal                filas, fila;


// Precedencias
precedence  left    PRINT;
precedence  left    INVERSA, TRANSPUESTA, ADJUNTA;
precedence  left    MAS, MENOS;
precedence  left    POR, DIV;
precedence  left    AP, CP;
precedence  left    AC, CC;


// Gramática
linea ::= definicion    PYC
        | funcion       PYC;

definicion ::= IDENT:v  ASIG    argumento       {: TablaSimbolos.insertar(v, matriz); :};

matriz ::= AC   filas:f  CC                     {: matriz = crearMatriz(filas); filas.clear();  :};

filas ::= filas PYC fila:f                      {: filas.add((ArrayList<Double>) fila.clone()); fila.clear();   :}
        | fila:f                                {: filas.add((ArrayList<Double>) fila.clone()); fila.clear();   :};

fila ::= fila   COMA    NUMERO:n                {: fila.add(new Double(n)); :}
       | NUMERO:n                               {: fila.add(new Double(n)); :};

funcion ::= PRINT       AP  argumento:m CP      {: if (m != null) Matrices.print(m);    :} 
          | INVERSA     AP  argumento:m CP      {: matriz = Matrices.inversa(m);        :}
          | TRANSPUESTA AP  argumento:m CP      {: matriz = Matrices.transpuesta(m);    :}
          | ADJUNTA     AP  argumento:m CP      {: matriz = Matrices.adjunta(m);        :};

argumento ::= argumento:a   MAS     argumento:b     {: matriz = Matrices.suma(a,b);                         RESULT = matriz;    :}
            | argumento:a   MENOS   argumento:b     {: matriz = Matrices.suma(a, Matrices.producto(-1, b)); RESULT = matriz;    :}
            | argumento:a   POR     argumento:b     {: matriz = Matrices.producto(a,b);                     RESULT = matriz;    :}
            | argumento:a   DIV     argumento:b     {: matriz = Matrices.producto(a, Matrices.inversa(b));  RESULT = matriz;    :}
            | funcion                               {: RESULT = matriz;                                                         :}
            | matriz                                {: RESULT = matriz;                                                         :};


import java_cup.runtime.*;
import java.util.ArrayList;


action code {:
    double[][] matriz;
    
    ArrayList<ArrayList<Double>> filas = new ArrayList<ArrayList<Double>>();
    ArrayList<Double> fila = new ArrayList<Double>();
    
    String variable;
:}


// Terminales
terminal    String  IDENT;                                  // Variables
terminal    Double  NUMERO;                                 // Números
terminal            ALL, CLL, AP, CP, AC, CC;               // Aperturas y cierres
terminal            COMA, PYC, ASIG;                        // Símbolos de separación
terminal            MAS, MENOS, POR, DIV;                   // Operaciones
terminal            PRINT, INVERSA, TRANSPUESTA, ADJUNTA;   // Funciones matriciales


// No-Terminales
non terminal    double[][]  matriz;
non terminal    double[][]  funcion;
non terminal    double[][]  argumento;
non terminal    double[][]  operacion;
non terminal                linea;
non terminal                definicion;
non terminal                filas, fila;


// Precedencias
precedence  left    PRINT, INVERSA, TRANSPUESTA, ADJUNTA;
precedence  left    MAS, MENOS;
precedence  left    POR, DIV;
precedence  left    AP, CP;
precedence  left    AC, CC;


// Gramática
linea ::= definicion    PYC
        | funcion       PYC;

definicion ::= IDENT:v  ASIG    argumento       {: TablaSimbolos.insertar(v, matriz); :};

matriz ::= AC   filas:f  CC                     {: matriz = Matrices.toArray(filas);    filas.clear();  :};

filas ::= filas PYC fila:f                      {: filas.add((ArrayList<Double>) fila.clone()); fila.clear();   :}
        | fila:f                                {: filas.add((ArrayList<Double>) fila.clone()); fila.clear();   :};

fila ::= fila   COMA    NUMERO:n                {: fila.add(new Double(n)); :}
       | NUMERO:n                               {: fila.add(new Double(n)); :};

funcion ::= PRINT       AP  argumento:m CP      {: Matrices.print(m);                  :} 
          | INVERSA     AP  argumento:m CP      {: matriz = Matrices.inversa(m);       :}
          | TRANSPUESTA AP  argumento:m CP      {: matriz = Matrices.transpuesta(m);   :}
          | ADJUNTA     AP  argumento:m CP      {: matriz = Matrices.adjunta(m);       :};

argumento ::= argumento:a   MAS     argumento:b     {: matriz = Matrices.suma(a,b);                         RESULT = matriz;    :}
            | argumento:a   MENOS   argumento:b     {: matriz = Matrices.suma(a, Matrices.producto(-1, b)); RESULT = matriz;    :}
            | argumento:a   POR     argumento:b     {: matriz = Matrices.producto(a,b);                     RESULT = matriz;    :}
            | argumento:a   DIV     argumento:b     {: matriz = Matrices.producto(a, Matrices.inversa(b));  RESULT = matriz;    :}
            | matriz                                {: RESULT = matriz; :};

